{
  "hash": "1dc6ed48ec5588699c389199481021bd",
  "result": {
    "markdown": "---\ntitle: Doing GIS with Python\nformat:\n  html:\n    code-fold: false\n---\n\n## Start Python and Import the Data\n\nA test of using a python venv in QMD\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import Packages\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Read Data\nBC_subDivs = gpd.read_file('Data/SimplyAnalytics_Shapefiles_2023-02-02_23_07_59_7fa10dab487cee919a8d7e30ddf85ff3.shp')\n\n# Rename Columns\nBC_subDivs = BC_subDivs.rename(columns = {\n  'VALUE0':'Pop_Indigenous',\n  'VALUE1':'Pop_Total',\n  'VALUE2':'Pop_Visible_Minority'\n})\n\n# Project to BC Albers\nBC_subDivs = BC_subDivs.to_crs(3005)\n\n# Calculate White and Non-White Population Totals\nBC_subDivs['Pop_NonWhite'] = BC_subDivs[['Pop_Indigenous','Pop_Visible_Minority']].sum(axis=1)\nBC_subDivs['Pop_White'] = BC_subDivs['Pop_Total'] - BC_subDivs['Pop_NonWhite']\n\n# Make a Map\nfig,ax=plt.subplots(figsize=(6,6))\nBC_subDivs.plot(column='Pop_Total',ax=ax,edgecolor='k',legend=True)\nax.set_title('Population by BC Sub-Divison 2022')\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nText(0.5, 1.0, 'Population by BC Sub-Divison 2022')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](GIS_With_Python_files/figure-html/cell-2-output-2.png){width=511 height=471}\n:::\n:::\n\n\n## Saving Data\n\nLets save the data and also create a .zip file so the data can be downloaded more easily.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport zipfile\nimport shutil\nimport os\n# Export to .geojson and .shp\n\n# GEOJSON is a simple lightweight format that is well suited for web applications\nBC_subDivs.to_file('Data/BC_subDivs_2022.geojson',driver='GeoJSON')\n\n# Shapefile is a more complex format often used in desktop GIS.  We're saving to a temp folder because we will then zip the data for easier download\nBC_subDivs.to_file('Data/temp_files/BC_subDivs_2022.shp')\n\n# Save the .shp to a .zip for easier download\nfilepath = 'Data/Workshop_Data.zip'\n\n# Delete old .zip file *if it exists*\ntry:\n  os.unlink(filepath)\nexcept:\n  pass\n\nwith zipfile.ZipFile(filepath, 'a') as zipf:\n    source_path = 'Data/temp_files/'\n    source_name = 'BC_subDivs_2022'\n    destination_name = 'BC_subDivs_2022'\n    # Add the BC_subDivs_2022.shp\n    for tag in ['.shp','.dbf','.prj','.shx']:\n      zipf.write(source_path+source_name+tag, destination_name+tag)\n\n    # Add the deaths data as well\n    source_path = 'Data/PID_locations.csv'\n    destination = 'PID_locations.csv'\n    zipf.write(source_path, destination)\n\n# Delete data in temp_files\nfor root, dirs, files in os.walk('Data/temp_files'):\n    for f in files:\n      if f != '.gitignore':\n        os.unlink(os.path.join(root, f))\n    for d in dirs:\n      shutil.rmtree(os.path.join(root, d))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_17560\\2143700213.py:10: UserWarning: Column names longer than 10 characters will be truncated when saved to ESRI Shapefile.\n  BC_subDivs.to_file('Data/temp_files/BC_subDivs_2022.shp')\n```\n:::\n:::\n\n\n",
    "supporting": [
      "GIS_With_Python_files"
    ],
    "filters": [],
    "includes": {}
  }
}